#ifndef __constants

//#include <chrono>
#include <cstdint>

typedef uint64_t hashEntry_t;

typedef uint32_t hashKey_t;

typedef int16_t dist_t;
typedef int8_t side_t;
typedef int16_t val_t;
typedef int8_t square_t;

namespace constants {
    
//  typedef std::chrono::high_resolution_clock myclock;
//  static const myclock::time_point BEGINNING = myclock::now();
    
  const bool USE_HASH = true; 
	
  const unsigned HASH_ENTRIES = 1024 * 1024 * 128;

  const side_t BLACK = -1;
  const side_t NONE = 0;
  const side_t WHITE = 1;
  
  const square_t MAX_FILES = 7;
  const square_t MAX_RANKS = 6;
  const square_t MAX_DEPTH = 42;
  const square_t MAX_MOVES = 42;
  
  const val_t BEST_VALUE = 1000;
  const val_t WORST_VALUE = -BEST_VALUE;
  const val_t STALEMATE_VALUE = 0;

  
  const val_t WINDOW = 6;
  const val_t MATE_RANGE = MAX_MOVES;

  const val_t INVALID_VALUE = -1999;

  const square_t INVALID_MOVE = 63;

  const square_t NUM_THREATS = 69;
  
  // taken from https://tromp.github.io/c4/c4.html
  const unsigned long long MAX_POSITIONS = 4294967295;

  // const valType THREE_VAL = 8;
  // const valType TWO_VAL   = 2;
  
  const val_t RANK_THREE_VAL_TABLE[2][constants::MAX_RANKS] = 
  { // upside down, so first entry is rank[0]:
	  {  // ranks for white (= yellow) from 0 to 6
		 6,
		24,
		 5,
		21,
		 4,
		18
	  },
	  {  // ranks for black (= red) from 0 to  8
		24,
		 6,
		21,
		 5,
		18,
		 4
	  }	  
  };
  
  const val_t RANK_TWO_VAL_TABLE[2][constants::MAX_RANKS] = 
  { // upside down, so first entry is rank[_, 0]:
	  {  // ranks for white (= yellow) from 0 to 6
		4,
		2,
		4,
		2,
		3,
		1
	  },
	  {  // ranks for black (= red) from 0 to MAX_RANKS-1
		2,
        4,
		2,
        4,
		1,
		3
	  }	  
  };
  
  inline const val_t RANK_THREE_VAL(const square_t rank, const side_t side)
  {
	  //assert(rank < MAX_RANKS);
	  //return RANK_THREE_VAL_TABLE[rank];
	  const bool yellowOrRed = side == constants::WHITE;
	  return (3 * RANK_THREE_VAL_TABLE[yellowOrRed][rank]) / 4;
  }
  
  inline const val_t RANK_TWO_VAL(const square_t rank, const side_t side)
  {
	  //assert(rank < MAX_RANKS);
	  //return RANK_TWO_VAL_TABLE[rank];
	  const bool yellowOrRed = side == constants::WHITE;
	  return (3 * RANK_TWO_VAL_TABLE[yellowOrRed][rank] / 4);
//	  return 1;
  }

  const val_t OLD_CENTER_TABLE[MAX_FILES][MAX_RANKS] =
// rank: 0   1   2   3   4   5  
      {{ 3,  4,  5,  5,  4,  3}, // first FILE
       { 4,  6,  8,  8,  6,  4}, // second FILE
       { 5,  8, 11, 11,  8,  5}, // ...
       { 7, 10, 14, 12, 10,  7},
       { 5,  8, 11, 11,  8,  5},
       { 4,  6,  8,  8,  6,  4},
       { 3,  4,  5,  5,  4,  3}};

  const val_t CENTER_TABLE[MAX_FILES][MAX_RANKS] =
// rank: 0   1   2   3   4   5  
      {{ 1,  2,  3,  3,  2,  1}, // first FILE
       { 2,  3,  4,  4,  3,  2}, // second FILE
       { 3,  4,  6,  6,  4,  3}, // ...
       { 4,  7,  8,  8,  7,  4},
       { 3,  4,  6,  6,  4,  3},
       { 2,  3,  4,  4,  3,  2},
       { 1,  2,  3,  3,  2,  1}};

  const val_t THREAT_TABLE[MAX_FILES][MAX_RANKS][14] = {
    // first file:
    { {  0, 24, 45, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  4, 24, 25, 46, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  8, 24, 25, 26, 47, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 12, 24, 25, 26, 57, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 16, 25, 26, 58, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 20, 26, 59, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} },
    
    // second file:
    { {  0,  1, 27, 48, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  4,  5, 27, 28, 45, 49, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  8,  9, 27, 28, 29, 46, 50, 57, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 12, 13, 27, 28, 29, 47, 58, 60, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 16, 17, 28, 29, 59, 61, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 20, 21, 29, 62, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }, 
    
    // third file:
    { {  0,  1,  2, 30, 51, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  4,  5,  6, 30, 31, 48, 52, 57, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  8,  9, 10, 30, 31, 32, 45, 49, 53, 58, 60, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 12, 13, 14, 30, 31, 32, 46, 50, 59, 61, 63, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 16, 17, 18, 31, 32, 47, 62, 64, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 20, 21, 22, 32, 65, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }, 
    
    // 4th file:
    { {  0,  1,  2,  3, 33, 54, 57, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  4,  5,  6,  7, 33, 34, 51, 55, 58, 60, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  8,  9, 10, 11, 33, 34, 35, 48, 52, 56, 59, 61, 63, INVALID_VALUE}, 
      { 12, 13, 14, 15, 33, 34, 35, 45, 49, 53, 62, 64, 66, INVALID_VALUE}, 
      { 16, 17, 18, 19, 34, 35, 46, 50, 65, 67, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 20, 21, 22, 23, 35, 47, 68, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }, 
    
    // 5th file:
    { {  1,  2,  3, 36, 60, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  5,  6,  7, 36, 37, 54, 61, 63, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  9, 10, 11, 36, 37, 38, 51, 55, 62, 64, 66, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 13, 14, 15, 36, 37, 38, 48, 52, 56, 65, 67, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 17, 18, 19, 37, 38, 49, 53, 68, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 21, 22, 23, 38, 50, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }, 
    
    // 6th file:
    { {  2,  3, 39, 63, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  6,  7, 39, 40, 64, 66, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 10, 11, 39, 40, 41, 54, 65, 67, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 14, 15, 39, 40, 41, 51, 55, 68, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 18, 19, 40, 41, 52, 56, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 22, 23, 41, 53, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }, 

    // 7th file:
    { {  3, 42, 66, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      {  7, 42, 43, 67, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 11, 42, 43, 44, 68, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 15, 42, 43, 44, 54, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 19, 43, 44, 55, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE}, 
      { 23, 44, 56, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE} }
  };
}

inline square_t File(square_t sq) { return sq % constants::MAX_FILES; }
inline square_t Rank(square_t sq) { return sq / constants::MAX_FILES; }

#define __constants
#endif
